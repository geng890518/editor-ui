'use strict';

var React = require('react');

var StyleConstants = require('../../constants/Style');

var CirclesGroup = React.createClass({
  displayName: 'CirclesGroup',

  propTypes: {
    adjustedHeight: React.PropTypes.number.isRequired,
    circleRadius: React.PropTypes.number,
    data: React.PropTypes.array.isRequired,
    shouldAnimate: React.PropTypes.bool,
    translation: React.PropTypes.string,
    xScaleValueFunction: React.PropTypes.func.isRequired,
    yScaleValueFunction: React.PropTypes.func.isRequired
  },

  getDefaultProps: function getDefaultProps() {
    return {
      circleRadius: 3,
      shouldAnimate: true,
      translation: 'translate(0,0)'
    };
  },
  componentDidMount: function componentDidMount() {
    this._animateCircles();
  },
  componentDidUpdate: function componentDidUpdate() {
    this._animateCircles();
  },
  _animateCircles: function _animateCircles() {
    var _this = this;

    if (this.props.shouldAnimate) {
      d3.select(this.refs.circleGroup).selectAll('.circle').data(this.props.data).transition().attr('cy', function (d) {
        return _this.props.yScaleValueFunction(d.y);
      });
    }
  },
  render: function render() {
    var _props = this.props;
    var adjustedHeight = _props.adjustedHeight;
    var circleRadius = _props.circleRadius;
    var data = _props.data;
    var shouldAnimate = _props.shouldAnimate;
    var translation = _props.translation;
    var xScaleValueFunction = _props.xScaleValueFunction;
    var yScaleValueFunction = _props.yScaleValueFunction;

    var preventCircleOverlapCutOff = 45;

    return React.createElement(
      'g',
      { className: 'circle-group', ref: 'circleGroup', transform: translation },
      data.length <= preventCircleOverlapCutOff ? data.map(function (item, index) {
        var cx = xScaleValueFunction(item.x);
        var cy = shouldAnimate ? adjustedHeight : yScaleValueFunction(item.y);

        return React.createElement('circle', {
          className: 'circle',
          cx: cx,
          cy: cy,
          fill: StyleConstants.Colors.WHITE,
          key: index,
          r: circleRadius,
          stroke: StyleConstants.Colors.CHARCOAL
        });
      }) : null
    );
  }
});

module.exports = CirclesGroup;