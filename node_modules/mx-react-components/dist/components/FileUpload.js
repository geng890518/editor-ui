'use strict';

var numeral = require('numeral');
var Radium = require('radium');
var React = require('react');

var StyleConstants = require('../constants/Style');

var Button = require('./Button');
var Icon = require('./Icon');

var FileUpload = React.createClass({
  displayName: 'FileUpload',

  propTypes: {
    allowedFileTypes: React.PropTypes.array,
    imageUrl: React.PropTypes.string,
    maxFileSize: React.PropTypes.number,
    onFileAdd: React.PropTypes.func.isRequired,
    onFileRemove: React.PropTypes.func.isRequired,
    onFileValidation: React.PropTypes.func,
    style: React.PropTypes.oneOfType([React.PropTypes.array, React.PropTypes.object]),
    uploadedFile: React.PropTypes.any
  },

  getInitialState: function getInitialState() {
    return {
      dragging: false,
      imageSource: null
    };
  },
  componentDidMount: function componentDidMount() {
    this._readFile(this.props.uploadedFile);
  },
  componentWillReceiveProps: function componentWillReceiveProps(newProps) {
    if (newProps.uploadedFile !== this.props.uploadedFile) {
      this._readFile(newProps.uploadedFile);
    }
  },
  _handleFileSelect: function _handleFileSelect(e) {
    var file = e.target.files[0];

    if (file) {
      this._validateFile(file);
    }
  },
  _onDragOver: function _onDragOver(e) {
    e.stopPropagation();
    e.preventDefault();

    this.setState({
      dragging: true
    });
  },
  _onDragLeave: function _onDragLeave(e) {
    e.stopPropagation();
    e.preventDefault();

    this.setState({
      dragging: false
    });
  },
  _onDrop: function _onDrop(e) {
    e.stopPropagation();
    e.preventDefault();

    var file = e.dataTransfer.files[0];

    this._validateFile(file);
  },
  _onDropzoneClick: function _onDropzoneClick() {
    this._input.click();
  },
  _readFile: function _readFile(file) {
    var _this = this;

    if (file) {
      (function () {
        var reader = new FileReader();

        reader.readAsDataURL(file);

        reader.onload = function () {
          var imageSource = file.type.match('image*') ? reader.result : null;

          _this.setState({
            dragging: false,
            imageSource: imageSource
          });
        };
      })();
    }
  },
  _removeFile: function _removeFile(e) {
    e.stopPropagation();
    e.preventDefault();

    this._input.value = null;

    this.setState({
      imageSource: null
    });
    this.props.onFileRemove();
  },
  _validateFile: function _validateFile(file) {
    var isTooBig = this.props.maxFileSize < file.size / 1000;
    var isInvalidType = this.props.allowedFileTypes && this.props.allowedFileTypes.indexOf(file.type) < 0;
    var validationMessages = [];

    if (isTooBig || isInvalidType) {
      this.setState({
        dragging: false
      });

      this.props.onFileRemove(this.props.uploadedFile);
    } else {
      this.props.onFileAdd(file);
    }

    if (this.props.onFileValidation) {
      if (isTooBig) {
        validationMessages.push('file_size');
      }

      if (isInvalidType) {
        validationMessages.push('file_type');
      }

      this.props.onFileValidation(validationMessages);
    }
  },
  render: function render() {
    var _this2 = this;

    var dropzoneLoaded = this.props.imageUrl || this.props.uploadedFile;
    var imageSource = this.state.imageSource || this.props.imageUrl;

    return React.createElement(
      'div',
      {
        onClick: this._onDropzoneClick,
        onDragLeave: this._onDragLeave,
        onDragOver: this._onDragOver,
        onDrop: this._onDrop,
        style: [styles.dropzone, this.state.dragging && styles.dragging, dropzoneLoaded && styles.dropzoneLoaded, this.props.style]
      },
      dropzoneLoaded ? React.createElement(
        'div',
        { style: styles.fileInfo },
        this.props.children,
        imageSource ? React.createElement('img', { src: imageSource, style: [styles.previewImage, this.state.dragging && styles.faded] }) : React.createElement(Icon, { size: 60, style: styles.documentIcon, type: 'document' }),
        this.props.uploadedFile ? React.createElement(
          'div',
          null,
          React.createElement(
            'div',
            null,
            this.props.uploadedFile.name
          ),
          React.createElement(
            'div',
            null,
            numeral(this.props.uploadedFile.size / 1000).format('0.0'),
            'k'
          ),
          React.createElement(Button, {
            icon: 'delete',
            onClick: this._removeFile,
            style: styles.button,
            type: 'secondary'
          })
        ) : null
      ) : React.createElement(
        'div',
        { style: styles.dropzoneChild },
        this.state.dragging ? React.createElement(
          'div',
          { style: [styles.centered, styles.draggingText] },
          React.createElement(Icon, { size: 60, style: styles.importIcon, type: 'import' }),
          React.createElement(
            'div',
            null,
            'Drop file here to upload'
          )
        ) : React.createElement(
          'div',
          { style: styles.centered },
          this.props.children
        )
      ),
      React.createElement('input', {
        name: 'files',
        onChange: this._handleFileSelect,
        ref: function ref(_ref) {
          return _this2._input = _ref;
        },
        style: styles.hiddenInput,
        type: 'file'
      })
    );
  }
});

var styles = {
  dropzone: {
    backgroundColor: StyleConstants.Colors.PORCELAIN,
    border: '1px solid ' + StyleConstants.Colors.FOG,
    borderRadius: 3,
    color: StyleConstants.Colors.ASH,
    fontFamily: StyleConstants.Fonts.REGULAR,
    fontSize: StyleConstants.FontSizes.MEDIUM,
    height: 100,
    position: 'relative',
    textAlign: 'center'
  },
  hiddenInput: {
    display: 'none'
  },

  // Dragging Styles
  dragging: {
    backgroundColor: StyleConstants.Colors.WHITE,
    border: '1px dashed ' + StyleConstants.Colors.PRIMARY,
    height: 150
  },
  importIcon: {
    fill: StyleConstants.Colors.PRIMARY
  },
  draggingText: {
    color: StyleConstants.Colors.PRIMARY,
    fontFamily: StyleConstants.Fonts.SEMIBOLD,
    fontSize: StyleConstants.FontSizes.LARGE
  },
  faded: {
    opacity: 0.5
  },

  // Loaded Styles
  dropzoneLoaded: {
    height: 'auto',
    padding: 20
  },
  previewImage: {
    marginTop: 10,
    marginBottom: 10,
    maxWidth: '90%'
  },
  documentIcon: {
    fill: StyleConstants.Colors.ASH
  },
  button: {
    marginTop: 10
  },

  // Dropzone Text
  dropzoneChild: {
    height: '100%',
    pointerEvents: 'none'
  },
  centered: {
    left: '50%',
    position: 'absolute',
    top: '50%',
    transform: 'translate(-50%, -50%)'
  },
  invalidMessage: {
    fontSize: StyleConstants.FontSizes.LARGE,
    marginBottom: 10
  },
  invalidIcon: {
    color: StyleConstants.Colors.ASH
  }
};

module.exports = Radium(FileUpload);