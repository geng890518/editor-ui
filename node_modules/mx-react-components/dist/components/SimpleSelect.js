'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require('react');
var Radium = require('radium');

var Icon = require('./Icon');

var StyleConstants = require('../constants/Style');

var SimpleSelect = React.createClass({
  displayName: 'SimpleSelect',

  propTypes: {
    iconSize: React.PropTypes.number,
    iconStyles: React.PropTypes.object,
    items: React.PropTypes.array.isRequired,
    itemStyles: React.PropTypes.object,
    menuStyles: React.PropTypes.object,
    onScrimClick: React.PropTypes.func,
    style: React.PropTypes.object
  },

  getDefaultProps: function getDefaultProps() {
    return {
      items: [],
      onScrimClick: function onScrimClick() {}
    };
  },
  render: function render() {
    var _this = this;

    var styles = this.styles();

    return React.createElement(
      'div',
      { style: styles.component },
      React.createElement(
        'div',
        { style: _extends({}, styles.menu, this.props.menuStyles) },
        this.props.items.map(function (item, i) {
          return React.createElement(
            'div',
            {
              key: i,
              onClick: item.onClick,
              style: _extends({}, styles.item, _this.props.itemStyles)
            },
            item.icon ? React.createElement(Icon, { size: _this.props.iconSize || 20, style: _extends({}, styles.icon, _this.props.iconStyles), type: item.icon }) : null,
            item.text
          );
        })
      ),
      React.createElement('div', { onClick: this.props.onScrimClick, style: styles.scrim })
    );
  },
  styles: function styles() {
    return {
      component: _extends({
        height: 0,
        position: 'relative'
      }, this.props.style),

      menu: {
        alignSelf: 'stretch',
        backgroundColor: StyleConstants.Colors.WHITE,
        borderRadius: 3,
        boxShadow: StyleConstants.ShadowHigh,
        boxSizing: 'border-box',
        color: StyleConstants.Colors.BLACK,
        display: 'flex',
        flexDirection: 'column',
        fill: StyleConstants.Colors.BLACK,
        fontFamily: StyleConstants.FontFamily,
        fontSize: StyleConstants.FontSizes.MEDIUM,
        marginTop: 10,
        position: 'absolute',
        zIndex: 10
      },
      icon: {
        paddingRight: StyleConstants.Spacing.SMALL
      },
      item: {
        boxSizing: 'border-box',
        height: 40,
        padding: '14px 20px',
        textAlign: 'left',

        ':hover': {
          backgroundColor: StyleConstants.Colors.FOG,
          cursor: 'pointer'
        }
      },

      scrim: {
        bottom: 0,
        left: 0,
        position: 'fixed',
        right: 0,
        top: 0,
        zIndex: 9
      }
    };
  }
});

module.exports = Radium(SimpleSelect);